# Dataset pour test rapide
dataset_training_small = {
    "sample": [
        "Additionne deux nombres.\ndef addition(a, b):\n    return a + b",
        "Soustrait le deuxième nombre du premier.\ndef soustraction(a, b):\n    return a - b",
        "Multiplie deux nombres.\ndef multiplication(a, b):\n    return a * b",
        "Divise le premier nombre par le second.\ndef division(a, b):\n    return a / b",
        "Vérifie si un nombre est pair.\ndef est_pair(n):\n    return n % 2 == 0",
        "Met une chaîne de caractères en majuscules.\ndef en_majuscules(texte):\n    return texte.upper()",
        "Trouve le plus grand de deux nombres.\ndef maximum_de_deux(a, b):\n    return a if a > b else b",
        "Crée une liste des n premiers carrés.\ndef liste_carres(n):\n    return [i**2 for i in range(n)]",
        "Inverse une chaîne de caractères.\ndef inverser_chaine(s):\n    return s[::-1]",
        "Calcule la factorielle d'un nombre.\ndef factorielle(n):\n    if n == 0: return 1\n    return n * factorielle(n - 1)",
    ]
}

# Dataset complet
dataset_training = {
    "sample": [
        "Additionne deux nombres.\ndef addition(a, b):\n    return a + b",
        "Soustrait le deuxième nombre du premier.\ndef soustraction(a, b):\n    return a - b",
        "Multiplie deux nombres.\ndef multiplication(a, b):\n    return a * b",
        "Divise le premier nombre par le second.\ndef division(a, b):\n    return a / b",
        "Vérifie si un nombre est pair.\ndef est_pair(n):\n    return n % 2 == 0",
        "Met une chaîne de caractères en majuscules.\ndef en_majuscules(texte):\n    return texte.upper()",
        "Trouve le plus grand de deux nombres.\ndef maximum_de_deux(a, b):\n    return a if a > b else b",
        "Crée une liste des n premiers carrés.\ndef liste_carres(n):\n    return [i**2 for i in range(n)]",
        "Inverse une chaîne de caractères.\ndef inverser_chaine(s):\n    return s[::-1]",
        "Calcule la factorielle d'un nombre.\ndef factorielle(n):\n    if n == 0: return 1\n    return n * factorielle(n - 1)",
        "Joint une liste de mots en une seule chaîne.\ndef joindre_mots(liste_mots):\n    return ' '.join(liste_mots)",
        "Sépare une chaîne en une liste de mots.\ndef separer_chaine(chaine):\n    return chaine.split()",
        "Trouve le nombre maximum dans une liste.\ndef trouver_max(nombres):\n    return max(nombres)",
        "Supprime les doublons d'une liste.\ndef supprimer_doublons(liste):\n    return list(set(liste))",
        "Vérifie si une clé existe dans un dictionnaire.\ndef cle_existe(d, cle):\n    return cle in d",
        "Itère sur les clés et valeurs d'un dictionnaire.\ndef iterer_dict(d):\n    for cle, valeur in d.items():\n        print(f'{cle}: {valeur}')",
        "Écrit du texte dans un fichier.\ndef ecrire_fichier(nom_fichier, texte):\n    with open(nom_fichier, 'w') as f:\n        f.write(texte)",
        "Lit le contenu complet d'un fichier.\ndef lire_fichier(nom_fichier):\n    with open(nom_fichier, 'r') as f:\n        return f.read()",
        "Classe simple pour représenter une personne.\nclass Personne:\n    def __init__(self, nom):\n        self.nom = nom",
        "Calcule la longueur d'une liste.\ndef longueur_liste(liste):\n    return len(liste)",
        "Obtient l'heure actuelle.\nimport datetime\ndef heure_actuelle():\n    return datetime.datetime.now().time()",
        "Génère un nombre aléatoire entre a et b.\nimport random\ndef nombre_aleatoire(a, b):\n    return random.randint(a, b)",
        "Vérifie si tous les éléments d'une liste sont vrais.\ndef tout_vrai(liste):\n    return all(liste)",
        "Vérifie si au moins un élément d'une liste est vrai.\ndef un_vrai(liste):\n    return any(liste)",
        "Calcule la racine carrée d'un nombre.\nimport math\ndef racine_carree(n):\n    return math.sqrt(n)",
        "Arrondit un nombre à l'entier le plus proche.\ndef arrondir(n):\n    return round(n)",
        "Convertit un dictionnaire en chaîne JSON.\nimport json\ndef en_json(d):\n    return json.dumps(d)",
        "Convertit une chaîne JSON en dictionnaire.\nimport json\ndef depuis_json(chaine_json):\n    return json.loads(chaine_json)",
        "Met en pause l'exécution pendant n secondes.\nimport time\ndef pause(n):\n    time.sleep(n)",
        "Vérifie si un chemin de fichier existe.\nimport os\ndef fichier_existe(chemin):\n    return os.model_name.exists(chemin)",
        "Génère une séquence de nombres de la suite de Fibonacci.\ndef fibonacci(n):\n    a, b = 0, 1\n    for _ in range(n):\n        yield a\n        a, b = b, a + b",
        "Trie une liste de nombres.\ndef trier_liste(nombres):\n    return sorted(nombres)",
        "Compte les occurrences d'un élément dans une liste.\ndef compter_occurrences(liste, element):\n    return liste.count(element)",
        "Calcule la moyenne d'une liste de nombres.\ndef moyenne(nombres):\n    return sum(nombres) / len(nombres)",
        "Vérifie si une chaîne est un palindrome.\ndef est_palindrome(s):\n    return s == s[::-1]",
        "Crée un dictionnaire à partir de deux listes (clés, valeurs).\ndef creer_dict(cles, valeurs):\n    return dict(zip(cles, valeurs))",
        "Filtre les nombres pairs d'une liste.\ndef filtrer_pairs(nombres):\n    return [n for n in nombres if n % 2 == 0]",
        "Trouve l'indice d'un élément dans une liste.\ndef trouver_indice(liste, element):\n    return liste.index(element)",
        "Classe Chien qui hérite de la classe Animal.\nclass Animal:\n    def manger(self): return 'Miam'\nclass Chien(Animal):\n    def aboyer(self): return 'Woof'",
        "Utilisation d'une fonction lambda pour l'addition.\naddition_lambda = lambda x, y: x + y",
        "Supprime un élément d'un dictionnaire par sa clé.\ndef supprimer_cle(d, cle):\n    del d[cle]\n    return d",
        "Concatène deux listes.\ndef concatener_listes(l1, l2):\n    return l1 + l2",
        "Répète une chaîne n fois.\ndef repeter_chaine(s, n):\n    return s * n",
        "Obtient le type d'une variable.\ndef obtenir_type(variable):\n    return type(variable)",
        "Calcule la puissance d'un nombre.\ndef puissance(base, exposant):\n    return base ** exposant",
        "Nettoie les espaces au début et à la fin d'une chaîne.\ndef nettoyer_espaces(s):\n    return s.strip()",
        "Remplace une sous-chaîne par une autre.\ndef remplacer_texte(chaine, ancien, nouveau):\n    return chaine.replace(ancien, nouveau)",
        "Vérifie si une chaîne commence par un préfixe.\ndef commence_par(chaine, prefixe):\n    return chaine.startswith(prefixe)",
        "Vérifie si une chaîne se termine par un suffixe.\ndef finit_par(chaine, suffixe):\n    return chaine.endswith(suffixe)",
        "Trouve toutes les positions d'une lettre dans une chaîne.\ndef trouver_indices_lettre(chaine, lettre):\n    return [i for i, char in enumerate(chaine) if char == lettre]",
        "Fusionne deux dictionnaires.\ndef fusionner_dicts(d1, d2):\n    d1.update(d2)\n    return d1",
        "Crée un ensemble (set) à partir d'une liste.\ndef creer_ensemble(liste):\n    return set(liste)",
        "Calcule l'intersection de deux ensembles.\ndef intersection_ensembles(e1, e2):\n    return e1.intersection(e2)",
        "Calcule l'union de deux ensembles.\ndef union_ensembles(e1, e2):\n    return e1.union(e2)",
        "Gère une division par zéro avec try-except.\ndef diviser_securise(a, b):\n    try:\n        return a / b\n    except ZeroDivisionError:\n        return 'Erreur: Division par zéro'",
        "Obtient la valeur d'une clé de dictionnaire avec une valeur par défaut.\ndef get_avec_defaut(d, cle, defaut=None):\n    return d.get(cle, defaut)",
        "Choisit un élément au hasard dans une liste.\nimport random\ndef choisir_element(liste):\n    return random.choice(liste)",
        "Mélange les éléments d'une liste sur place.\nimport random\ndef melanger_liste(liste):\n    random.shuffle(liste)\n    return liste",
        "Aplatit une liste de listes.\ndef aplatir_liste(liste_de_listes):\n    return [item for sublist in liste_de_listes for item in sublist]",
        "Vérifie si une chaîne ne contient que des chiffres.\ndef est_numerique(s):\n    return s.isdigit()",
        "Trouve le mot le plus long dans une phrase.\ndef mot_le_plus_long(phrase):\n    mots = phrase.split()\n    return max(mots, key=len)",
        "Convertit une liste d'entiers en une chaîne.\ndef int_liste_en_chaine(nombres):\n    return ''.join(map(str, nombres))",
        "Calcule la somme des chiffres d'un nombre.\ndef somme_chiffres(n):\n    return sum(int(chiffre) for chiffre in str(n))",
        "Applique une fonction à chaque élément d'une liste (map).\ndef appliquer_map(fonction, liste):\n    return list(map(fonction, liste))",
        "Somme cumulative d'une liste.\nimport itertools\ndef somme_cumulative(nombres):\n    return list(itertools.accumulate(nombres))",
        "Décorateur simple pour mesurer le temps d'exécution.\nimport time\ndef timer(func):\n    def wrapper(*args, **kwargs):\n        start_time = time.time()\n        result = func(*args, **kwargs)\n        print(f'Temps: {time.time() - start_time}s')\n        return result\n    return wrapper",
        "Obtient le chemin du répertoire de travail actuel.\nimport os\ndef repertoire_actuel():\n    return os.getcwd()",
        "Crée un répertoire s'il n'existe pas.\nimport os\ndef creer_repertoire(nom):\n    os.makedirs(nom, exist_ok=True)",
        "Liste les fichiers dans un répertoire.\nimport os\ndef lister_fichiers(chemin):\n    return os.listdir(chemin)",
        "Exécute une commande système.\nimport subprocess\ndef executer_commande(commande):\n    return subprocess.run(commande, shell=True, capture_output=True, text=True)",
        "Recherche un motif avec les expressions régulières.\nimport re\ndef trouver_emails(texte):\n    return re.findall(r'[\\w\\.-]+@[\\w\\.-]+', texte)",
        "Ajoute du texte à la fin d'un fichier.\ndef ajouter_au_fichier(nom_fichier, texte):\n    with open(nom_fichier, 'a') as f:\n        f.write(texte)",
        "Lit un fichier ligne par ligne.\ndef lire_lignes(nom_fichier):\n    with open(nom_fichier, 'r') as f:\n        return f.readlines()",
        "Trie un dictionnaire par ses clés.\ndef trier_dict_par_cle(d):\n    return dict(sorted(d.items()))",
        "Vérifie si une année est bissextile.\ndef est_bissextile(annee):\n    return (annee % 4 == 0 and annee % 100 != 0) or (annee % 400 == 0)",
        "Calcule le PGCD de deux nombres.\nimport math\ndef pgcd(a, b):\n    return math.gcd(a, b)",
        "Trouve les clés d'un dictionnaire dont la valeur est x.\ndef trouver_cles_par_valeur(d, valeur_recherchee):\n    return [cle for cle, valeur in d.items() if valeur == valeur_recherchee]",
        "Permute les clés et les valeurs dans un dictionnaire.\ndef permuter_cle_valeur(d):\n    return {valeur: cle for cle, valeur in d.items()}",
        "Obtient les arguments de la ligne de commande.\nimport sys\ndef arguments_cli():\n    return sys.argv",
        "Générateur pour les nombres pairs jusqu'à n.\ndef gen_pairs(n):\n    for i in range(0, n + 1, 2):\n        yield i",
        "Vérifie si tous les caractères d'une chaîne sont en minuscules.\ndef tout_en_minuscules(s):\n    return s.islower()",
        "Divise une liste en morceaux de taille n.\ndef diviser_en_morceaux(liste, taille):\n    for i in range(0, len(liste), taille):\n        yield liste[i:i + taille]",
        "Calcule la médiane d'une liste de nombres.\ndef mediane(nombres):\n    nombres_tries = sorted(nombres)\n    milieu = len(nombres_tries) // 2\n    if len(nombres_tries) % 2 == 0:\n        return (nombres_tries[milieu - 1] + nombres_tries[milieu]) / 2\n    else:\n        return nombres_tries[milieu]",
        "Compte le nombre de voyelles dans une chaîne.\ndef compter_voyelles(s):\n    return sum(1 for char in s.lower() if char in 'aeiouy')",
        "Crée une matrice (liste de listes) de zéros.\ndef matrice_zeros(lignes, colonnes):\n    return [[0 for _ in range(colonnes)] for _ in range(lignes)]",
        "Transpose une matrice.\ndef transposer_matrice(matrice):\n    return [list(colonne) for colonne in zip(*matrice)]",
        "Utilise un defaultdict pour compter les éléments.\nfrom collections import defaultdict\ndef compter_avec_defaultdict(liste):\n    counts = defaultdict(int)\n    for item in liste:\n        counts[item] += 1\n    return counts",
        "Utilise un Counter pour faire la même chose plus simplement.\nfrom collections import Counter\ndef compter_avec_counter(liste):\n    return Counter(liste)",
        "Crée un tuple.\ndef creer_tuple():\n    return (1, 'deux', 3.0)",
        "Décompresse les valeurs d'un tuple dans des variables.\na, b, c = (1, 2, 3)\nprint(f'{a}, {b}, {c}')",
        "Lève une exception personnalisée.\ndef verifier_age(age):\n    if age < 18:\n        raise ValueError('Âge doit être supérieur ou égal à 18')",
        "Convertit un nombre en binaire.\ndef en_binaire(n):\n    return bin(n)",
        "Convertit un nombre en hexadécimal.\ndef en_hexadecimal(n):\n    return hex(n)",
        "Calcule la différence en jours entre deux dates.\nfrom datetime import date\ndef difference_jours(d1, d2):\n    return abs((d2 - d1).days)",
        "Retire le dernier élément d'une liste et le retourne.\ndef retirer_dernier(liste):\n    return liste.pop()",
        "Insère un élément à un index spécifique dans une liste.\ndef inserer_element(liste, index, element):\n    liste.insert(index, element)\n    return liste",
        "Calcule le produit de tous les éléments d'une liste.\nimport math\ndef produit_liste(nombres):\n    return math.prod(nombres)",
        "Enlève les caractères non-alphanumériques d'une chaîne.\nimport re\ndef nettoyer_chaine(s):\n    return re.sub(r'[^A-Za-z0-9]', '', s)",
        "Vérifie si deux listes ont au moins un élément en commun.\ndef element_commun(l1, l2):\n    return not set(l1).isdisjoint(l2)",
        "Trouve l'élément le plus fréquent dans une liste.\ndef element_plus_frequent(liste):\n    return max(set(liste), key=liste.count)"
    ]
}